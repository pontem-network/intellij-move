FILE
  MvModuleImpl(MODULE)
    PsiElement(module)('module')
    PsiWhiteSpace(' ')
    MvAddressRefImpl(ADDRESS_REF)
      PsiElement(DIEM_ADDRESS)('0x1')
    PsiElement(::)('::')
    PsiElement(IDENTIFIER)('M')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n    ')
    MvItemSpecImpl(ITEM_SPEC)
      PsiElement(spec)('spec')
      PsiErrorElement:IDENTIFIER, fun, module or native expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvItemSpecImpl(ITEM_SPEC)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      MvItemSpecRefImpl(ITEM_SPEC_REF)
        PsiElement(IDENTIFIER)('my_function')
      PsiErrorElement:<function signature> or '{' expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvItemSpecImpl(ITEM_SPEC)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      MvItemSpecRefImpl(ITEM_SPEC_REF)
        PsiElement(IDENTIFIER)('MyStruct')
      PsiErrorElement:<function signature> or '{' expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvModuleItemSpecImpl(MODULE_ITEM_SPEC)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      PsiElement(module)('module')
      PsiErrorElement:'{' expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvSpecFunctionImpl(SPEC_FUNCTION)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      PsiElement(fun)('fun')
      PsiErrorElement:IDENTIFIER expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvSpecFunctionImpl(SPEC_FUNCTION)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      PsiElement(fun)('fun')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('myfun')
      PsiErrorElement:'(' or <type parameters> expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvSchemaImpl(SCHEMA)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      PsiElement(schema_kw)('schema')
      PsiErrorElement:IDENTIFIER expected, got 'spec'
        <empty list>
    PsiWhiteSpace('\n    ')
    MvSchemaImpl(SCHEMA)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      PsiElement(schema_kw)('schema')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('MySchema')
      PsiErrorElement:<type parameters> or '{' expected, got 'fun'
        <empty list>
    PsiWhiteSpace('\n\n    ')
    MvFunctionImpl(FUNCTION)
      PsiElement(fun)('fun')
      PsiWhiteSpace(' ')
      PsiElement(IDENTIFIER)('m')
      MvFunctionParameterListImpl(FUNCTION_PARAMETER_LIST)
        PsiElement(()('(')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      MvCodeBlockImpl(CODE_BLOCK)
        PsiElement({)('{')
        PsiWhiteSpace('\n        ')
        MvExprStmtImpl(EXPR_STMT)
          MvPathExprImpl(PATH_EXPR)
            MvPathImpl(PATH)
              PsiElement(IDENTIFIER)('assume')
          PsiElement(;)(';')
        PsiWhiteSpace('\n        ')
        MvLetStmtImpl(LET_STMT)
          PsiElement(let)('let')
          PsiWhiteSpace(' ')
          MvPatBindingImpl(PAT_BINDING)
            PsiElement(IDENTIFIER)('a')
          PsiWhiteSpace(' ')
          MvInitializerImpl(INITIALIZER)
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MvPathExprImpl(PATH_EXPR)
              MvPathImpl(PATH)
                PsiElement(IDENTIFIER)('exists')
          PsiElement(;)(';')
        PsiWhiteSpace('\n        ')
        MvExprStmtImpl(EXPR_STMT)
          MvLitExprImpl(LIT_EXPR)
            PsiElement(INTEGER_LITERAL)('1')
          PsiWhiteSpace(' ')
          PsiErrorElement:'(', '::', <operator>, '=' or '[' expected, got '=='
            PsiElement(==)('==')
          PsiElement(>)('>')
        PsiWhiteSpace(' ')
        MvExprStmtImpl(EXPR_STMT)
          MvLitExprImpl(LIT_EXPR)
            PsiElement(INTEGER_LITERAL)('2')
          PsiElement(;)(';')
        PsiWhiteSpace('\n    ')
        PsiElement(})('}')
    PsiWhiteSpace('\n    ')
    MvModuleItemSpecImpl(MODULE_ITEM_SPEC)
      PsiElement(spec)('spec')
      PsiWhiteSpace(' ')
      PsiElement(module)('module')
      PsiWhiteSpace(' ')
      MvSpecCodeBlockImpl(SPEC_CODE_BLOCK)
        PsiElement({)('{')
        PsiWhiteSpace('\n        ')
        MvIncludeStmtImpl(INCLUDE_STMT)
          PsiElement(include_kw)('include')
          PsiWhiteSpace(' ')
          MvSchemaIncludeItemImpl(SCHEMA_INCLUDE_ITEM)
            MvSchemaLitImpl(SCHEMA_LIT)
              MvPathImpl(PATH)
                PsiElement(IDENTIFIER)('Schema')
          PsiErrorElement:'::', ';', <type arguments>, '{' or '}' expected, got 'assert'
            <empty list>
        PsiWhiteSpace('\n\n        ')
        MvSpecExprStmtImpl(SPEC_EXPR_STMT)
          MvAssertSpecExprImpl(ASSERT_SPEC_EXPR)
            PsiElement(assert_kw)('assert')
            PsiErrorElement:<expression> or '[' expected, got ';'
              <empty list>
          PsiElement(;)(';')
        PsiWhiteSpace('\n        ')
        MvSpecExprStmtImpl(SPEC_EXPR_STMT)
          MvAssumeSpecExprImpl(ASSUME_SPEC_EXPR)
            PsiElement(assume_kw)('assume')
            PsiErrorElement:':', <expression> or '[' expected, got ';'
              <empty list>
          PsiElement(;)(';')
        PsiWhiteSpace('\n        ')
        MvSpecExprStmtImpl(SPEC_EXPR_STMT)
          MvAssumeSpecExprImpl(ASSUME_SPEC_EXPR)
            PsiElement(assume_kw)('assume')
            PsiWhiteSpace(' ')
            MvExistsQuantExprImpl(EXISTS_QUANT_EXPR)
              PsiElement(exists_kw)('exists')
              PsiErrorElement:IDENTIFIER expected, got '1'
                <empty list>
              PsiWhiteSpace(' ')
              MvLitExprImpl(LIT_EXPR)
                PsiElement(INTEGER_LITERAL)('1')
          PsiElement(;)(';')
        PsiWhiteSpace('\n\n        ')
        MvSpecExprStmtImpl(SPEC_EXPR_STMT)
          MvEnsuresSpecExprImpl(ENSURES_SPEC_EXPR)
            PsiElement(ensures_kw)('ensures')
            PsiWhiteSpace(' ')
            MvBinaryExprImpl(BINARY_EXPR[==>])
              MvPathExprImpl(PATH_EXPR)
                MvPathImpl(PATH)
                  PsiElement(IDENTIFIER)('result')
              PsiWhiteSpace(' ')
              MvBinaryOpImpl(BINARY_OP)
                PsiElement(==>)('==>')
              PsiWhiteSpace(' ')
              MvLitExprImpl(LIT_EXPR)
                PsiElement(INTEGER_LITERAL)('1')
          PsiElement(;)(';')
        PsiWhiteSpace('\n        ')
        MvEnsuresSpecExprImpl(ENSURES_SPEC_EXPR)
          PsiElement(ensures_kw)('ensures')
          PsiWhiteSpace(' ')
          MvLitExprImpl(LIT_EXPR)
            PsiElement(BOOL_LITERAL)('true')
        PsiWhiteSpace('\n    ')
        PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')